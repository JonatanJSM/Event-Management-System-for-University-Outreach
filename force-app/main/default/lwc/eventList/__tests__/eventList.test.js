import { createElement } from 'lwc';
import EventList from 'c/eventList';
const mockGetActiveCampaigns = require('@salesforce/apex/EventController.getActiveCampaigns').default;
jest.mock(
    '@salesforce/apex/EventController.getActiveCampaigns',
    () => {
        const {
          createApexTestWireAdapter
        } = require('@salesforce/sfdx-lwc-jest');
        return {
          default: createApexTestWireAdapter(jest.fn())
        };
      },
      { virtual: true }
);

describe('c-event-list', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('TODO: test case generated by CLI command, please fill in test logic', () => {
        const element = createElement('c-event-list', {
            is: EventList
        });

        // Act
        document.body.appendChild(element);

        // Assert
        // const div = element.shadowRoot.querySelector('div');
        expect(1).toBe(1);
    });


    describe('c-event-list', () => {
        afterEach(() => {
            while (document.body.firstChild) {
                document.body.removeChild(document.body.firstChild);
            }
        });

        it('renders no campaigns when no data is returned', () => {
            const element = createElement('c-event-list', {
                is: EventList
            });

            // Act
            document.body.appendChild(element);
            mockGetActiveCampaigns.emit([]);

            const campaignElements = element.shadowRoot.querySelectorAll('.campaign');
            expect(campaignElements.length).toBe(0);
        });

        it('renders campaigns when data is returned', async () => {
            const element = createElement('c-event-list', {
                is: EventList
            });
            const mockCampaigns = [
                { Id: '1', Name: 'Campaign 1' },
                { Id: '2', Name: 'Campaign 2' }
            ];

            // Act
            document.body.appendChild(element);
            mockGetActiveCampaigns.emit(mockCampaigns);

            // Wait for any asynchronous DOM updates
            await Promise.resolve();

            const campaignElements = element.shadowRoot.querySelectorAll('.campaign');
            expect(campaignElements.length).toBe(0);
        });

    });
});